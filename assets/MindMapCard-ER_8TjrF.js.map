{"version":3,"file":"MindMapCard-ER_8TjrF.js","sources":["../../src/components/MindMapCard.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useStore } from '../utils/store';\nimport { useMemo } from 'react';\n\n/**\n * MindMapCard component displays a preview of a mind map in the grid view\n *\n * @param {Object} props - Component props\n * @param {string} props.id - Mind map ID\n * @param {string} props.title - Mind map title\n * @param {string} props.description - Mind map description\n * @param {Array} props.tags - Mind map tags\n * @param {string} props.created - Mind map creation date in ISO format\n */\nconst MindMapCard = ({ id, title, description, tags = [], created }) => {\n  const toggleTag = useStore(state => state.toggleTag);\n  const selectedTags = useStore(state => state.selectedTags);\n  const MAX_VISIBLE_TAGS = 3;\n\n  /**\n   * Prepare tags for display, limiting them to a maximum number and adding a \"+X more\" indicator if needed\n   * @returns {Object} Object containing visible tags and overflow count\n   */\n  const tagDisplay = useMemo(() => {\n    if (!tags || tags.length === 0) return { visibleTags: [], overflowCount: 0 };\n\n    // Prioritize selected tags to be visible\n    const selectedTagsInThisCard = tags.filter(tag => selectedTags.includes(tag));\n    const unselectedTags = tags.filter(tag => !selectedTags.includes(tag));\n\n    // If we have selected tags, show them first\n    let visibleTags;\n    if (selectedTagsInThisCard.length >= MAX_VISIBLE_TAGS) {\n      visibleTags = selectedTagsInThisCard.slice(0, MAX_VISIBLE_TAGS);\n    } else {\n      // Fill remaining slots with unselected tags\n      visibleTags = [\n        ...selectedTagsInThisCard,\n        ...unselectedTags.slice(0, MAX_VISIBLE_TAGS - selectedTagsInThisCard.length)\n      ];\n    }\n\n    const overflowCount = Math.max(0, tags.length - visibleTags.length);\n\n    return { visibleTags, overflowCount };\n  }, [tags, selectedTags, MAX_VISIBLE_TAGS]);\n\n  const handleTagClick = (e, tag) => {\n    e.preventDefault(); // Prevent navigation\n    toggleTag(tag);\n  };\n\n  /**\n   * Format the ISO date string to a more readable format\n   * @param {string} dateString - ISO date string\n   * @returns {string} - Formatted date string\n   */\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n\n    const date = new Date(dateString);\n    const options = { year: 'numeric', month: 'short', day: 'numeric' };\n    return date.toLocaleDateString(undefined, options);\n  };\n\n  return (\n    <Link\n      to={`/view/${id}`}\n      className=\"mindmap-card backdrop-blur-sm bg-white/90 dark:bg-gray-800/90 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden flex flex-col hover:translate-y-[-4px] w-full h-full border border-white/20 dark:border-gray-700/30\"\n      aria-label={`Open mind map: ${title || ''}`}\n    >\n      {/* Card header with less bright gradient background */}\n      <div className=\"bg-gradient-to-r from-green-800 to-gray-900 p-3 sm:p-3\">\n        <h2 className=\"text-white font-bold text-base sm:text-base line-clamp-2\" title={title}>\n          {title}\n        </h2>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3 sm:p-4 flex-1 flex flex-col\">\n        <p className=\"text-gray-600 dark:text-gray-300 mb-2 flex-1 line-clamp-3 text-sm\">\n          {description}\n        </p>\n\n        {/* Tags - Compact Layout */}\n        {tags.length > 0 && (\n          <div className=\"flex flex-wrap items-center gap-1\">\n            {tagDisplay.visibleTags.map(tag => (\n              <button\n                key={tag}\n                onClick={(e) => handleTagClick(e, tag)}\n                className={`text-xs px-1.5 py-0.5 rounded-full transition-colors ${\n                  selectedTags.includes(tag)\n                    ? 'bg-green-600 text-white'\n                    : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'\n                }`}\n              >\n                {tag}\n              </button>\n            ))}\n\n            {/* Show \"+X more\" indicator if we have overflow tags */}\n            {tagDisplay.overflowCount > 0 && (\n              <span\n                className=\"text-xs px-1 text-gray-500 dark:text-gray-400 cursor-pointer hover:underline\"\n                title={tags.slice(tagDisplay.visibleTags.length).join(', ')}\n              >\n                +{tagDisplay.overflowCount} more\n              </span>\n            )}\n          </div>\n        )}\n\n        {/* Card footer with date */}\n        {created && (\n          <div className=\"mt-2 pt-2 border-t border-gray-200 dark:border-gray-700 text-xs text-gray-500 dark:text-gray-400 flex items-center\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3.5 w-3.5 mr-1 text-green-500 dark:text-green-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n            </svg>\n            <span>Created {formatDate(created)}</span>\n          </div>\n        )}\n      </div>\n    </Link>\n  );\n};\n\nMindMapCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  created: PropTypes.string,\n};\n\nexport default MindMapCard;"],"names":["MindMapCard","id","title","description","tags","created","toggleTag","useStore","state","selectedTags","MAX_VISIBLE_TAGS","tagDisplay","useMemo","selectedTagsInThisCard","tag","unselectedTags","visibleTags","overflowCount","handleTagClick","formatDate","dateString","date","options","jsxs","Link","jsx","e","PropTypes"],"mappings":"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"}